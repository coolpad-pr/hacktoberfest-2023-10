There is a row of N walls in Geeksland. The king of Geeksland ordered Alexa to color all the walls on the occasion of New Year. Alexa can color each wall with one of the K colors. The cost associated with coloring each wall with a particular color is represented by a 2D costs array of size N * K. For example, costs[0][0] is the cost of coloring wall 0 with color 0; costs[1][2] is the cost of coloring wall 1 with color 2, and so on... Find the minimum cost to color all the walls such that no two adjacent walls have the same color.

Note: If you are not able to paint all the walls, then you should return -1.

Example 1:

Input:
N = 4, K = 3
costs[][] = {{1, 5, 7},
             {5, 8, 4},
             {3, 2, 9},
             {1, 2, 4}}

Output:
8
Explanation:
Paint wall 0 with color 0. Cost = 1
Paint wall 1 with color 2. Cost = 4
Paint wall 2 with color 1. Cost = 2
Paint wall 3 with color 0. Cost = 1
Total Cost = 1 + 4 + 2 + 1 = 8


def minCostToPaintWalls(costs, N, K):
    if N == 0:
        return 0
    if K == 1:
        return -1

    dp = [[0] * K for _ in range(N)]

    # Initialize the first row with the costs of painting the first wall.
    for i in range(K):
        dp[0][i] = costs[0][i]

    for i in range(1, N):
        for j in range(K):
            dp[i][j] = float('inf')
            for k in range(K):
                if j != k:
                    dp[i][j] = min(dp[i][j], dp[i - 1][k] + costs[i][j])

    return min(dp[N - 1])

# Example usage:
N = 4
K = 3
costs = [[1, 5, 7], [5, 8, 4], [3, 2, 9], [1, 2, 4]]
result = minCostToPaintWalls(costs, N, K)
print(result)  # Output: 8
